var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AssignTaxonomy","category":"page"},{"location":"#AssignTaxonomy","page":"Home","title":"AssignTaxonomy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AssignTaxonomy, an all Julia implementation of the RDP Naive Bayesian Classifier algorithm for assigning taxonomic classifications based on DNA sequences. Most users will only need to use the assign_taxonomy function on a pair of fasta files (one with target sequences, one with a reference database). However, additional functions are provided for reading in reference and target fasta files, for those who prefer to work with Julia data structures (e.g. vectors of DNA sequences, arrays of taxonomic classifications). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AssignTaxonomy]","category":"page"},{"location":"#AssignTaxonomy.ClassificationResult","page":"Home","title":"AssignTaxonomy.ClassificationResult","text":"The results returned by assign_taxonomy. Individual columns can be accessed by e.g. my_result.Genus,  and a list of column names can be accessed by names(my_result). The result can  be converted to a DataFrame by using DataFrames; DataFrame(my_result) or written to CSV with headers by  using CSV; CSV.write(\"my_result.csv\",my_result).\n\n\n\n\n\n","category":"type"},{"location":"#AssignTaxonomy.assign_taxonomy-Tuple{Any, Any}","page":"Home","title":"AssignTaxonomy.assign_taxonomy","text":"assign_taxonomy(seq_fasta,ref_fasta; k = 8, n_bootstrap = 100,keep_lp = false,lp=false)\n\nUse the RDP Naive Bayesian Classifier algorithm to assign taxonomic  classifications based on DNA sequence data. This function takes (the paths to) two fasta files seq_fasta and ref_fasta, containing target sequences and a reference database respectively. It  returns Tables.jl compatible ClassificationResult, containing the target sequence IDs,  target sequences, taxonomic classifications and bootstrapped confidence levels.\n\nseq_fasta: Path to a fasta of sequnces to be classified.\nref_fasta: Path to a fasta reference database.\nk: Length of kmers to use.\nn_bootstrap: Number of bootstrap iterations to perform.\nkeep_lp: Return array of log probabilities alongside classification result if true \nlp: Array of log probabilities for the classifier to use. \n\nref_fasta must be a DADA2-formatted reference database.  See here for examples.\n\n\n\n\n\n","category":"method"},{"location":"#AssignTaxonomy.get_reference-Tuple{Any}","page":"Home","title":"AssignTaxonomy.get_reference","text":"get_reference(ref_fasta)\n\nTakes a path to a reference fasta. Returns a Vector{LongDNA{4}} of reference sequences  and a matrix taxonomic classifications. The reference fasta must be a DADA2-formatted reference database.  See here for examples.\n\n\n\n\n\n","category":"method"},{"location":"#AssignTaxonomy.get_targets-Tuple{Any}","page":"Home","title":"AssignTaxonomy.get_targets","text":"get_targets(seq_fasta)\n\nTakes a path to a fasta of sequences to be classified. Returns a Vector{LongDNA{4}} of target sequences  and a Vector{String} of sequence IDs, taken from hte fasta record identifiers.\n\n\n\n\n\n","category":"method"}]
}
